#!/bin/bash

# Common utility functions used across all nova charms.
# Assumes $CHARM is set to charm name (for logging).

function set_or_update {
  # Set a config option in nova.conf or api-paste.ini, depending
  # Defaults to updating nova.conf
  local key="$1"
  local value="$2"
  local conf_file="$3"

  local nova_conf=${NOVA_CONF:-/etc/nova/nova.conf}
  local api_conf=${API_CONF:-/etc/nova/api-paste.ini}

  [[ -z $key ]] && juju-log "$CHARM: set_or_update: value $value missing key" && exit 1
  [[ -z $value ]] && juju-log "$CHARM: set_or_update: key $key missing value" && exit 1

  [[ -z "$conf_file" ]] && conf_file=$nova_conf

  local pattern=""
  case "$conf_file" in
    "$nova_conf") match="^$key="
                  pattern="$key="
                  out=$pattern
                  ;;
    "$api_conf") match="^$key = "
                 pattern="$match"
                 out="$key = "
                 ;;
    *) juju-log "$CHARM ERROR: set_or_update: Invalid conf_file ($conf_file)"
  esac

  cat $conf_file | grep "$match$value" >/dev/null &&
    juju-log "$CHARM: $key=$value already in set in $conf_file" \
      && return 0
  if cat $conf_file | grep "$match" >/dev/null ; then
    juju-log "$CHARM: Updating $conf_file, $key=$value"
    sed -i "s|\($pattern\).*|\1$value|" $conf_file
  else
    juju-log "$CHARM: Setting new option $key=$value in $conf_file"
    echo "$out$value" >>$conf_file
  fi
}

function set_config_flags() {
  # Set user-defined nova.conf flags from deployment config
  juju-log "$CHARM: Processing config-flags."
  flags=$(config-get config-flags)
  if [[ "$flags" != "None" && -n "$flags" ]] ; then
    for f in $(echo $flags | sed -e 's/,/ /g') ; do
      k=$(echo $f | cut -d= -f1)
      v=$(echo $f | cut -d= -f2)
      set_or_update "$k" "$v"
    done
  fi
}

function nova_ctl_status {
  # Return 0 if a service is running, 1 otherwise.
  local svc="$1"
  local status=$(service $svc status | cut -d/ -f1 | awk '{ print $2 }')
  case $status in
    "start") return 0 ;;
    "stop") return 1 ;;
    *) echo "ERROR: Unexpected status of service $svc: $status" && exit 1 ;;
  esac
}

function nova_ctl {
  # control a specific service, or all (as defined by $SERVICES)
  if [[ $1 == "all" ]] ; then
    ctl="$SERVICES"
  else
    ctl="$1"
  fi
  action=$2
  if [[ -z $ctl ]] || [[ -z $action ]] ; then
    juju-log "ERROR nova_ctl: Not enough arguments"
    exit 1
  fi
  for i in $ctl ; do
    case $action in
      "start")
        nova_ctl_status $i || service $i start ;;
      "stop")
        nova_ctl_status $i && service $i stop || return 0 ;;
      "restart")
        nova_ctl_status $i && service $i restart || service $i start ;;
    esac
    if [[ $? != 0 ]] ; then
      juju-log "$CHARM: nova_ctl ERROR - Service $i failed to $action"
    fi
  done
}

configure_volume_service() {
  local svc="$1"
  case "$svc" in
    "cinder") set_or_update "volume_api_class" "nova.volume.cinder.API" ;;
    "nova-volume") set_or_update "volume_api_class" "nova.volume.api.API" ;;
    *) juju-log "$CHARM ERROR - configure_volume_service: Invalid service $svc"
       return 1 ;;
  esac
}

function configure_network_manager {
  local manager="$1"
  echo "$CHARM: configuring $manager network manager"
  case $1 in
    "FlatManager")
      set_or_update "network_manager" "nova.network.manager.FlatManager"
      ;;
    "FlatDHCPManager")
      set_or_update "network_manager" "nova.network.manager.FlatDHCPManager"
      ;;
    *) echo "ERROR: Invalid network manager $1" && exit 1 ;;
  esac
}

function configure_install_source {
  # Setup and configure installation source based on a config flag.
  local src="$1"

  # Default to installing from the main Ubuntu archive.
  [[ $src == "distro" ]] || [[ -z "$src" ]] && return 0

  . /etc/lsb-release

  # standard 'ppa:someppa/name' format.
   if [[ "${src:0:4}" == "ppa:" ]] ; then
    juju-log "$CHARM: Configuring installation from custom src ($src)"
    add-apt-repository -y "$src" || exit 1
    return
  fi

  # standard 'deb http://url/ubuntu main' entries. gpg key ids must
  # be appended to the end of url after a |, ie:
  # 'deb http://url/ubuntu main|$GPGKEYID'
  if [[ "${src:0:3}" == "deb" ]] ; then
    juju-log "$CHARM: Configuring installation from custom src URL ($src)"
    if echo "$src" | grep -q "|" ; then
      # gpg key id tagged to end of url folloed by a |
      url=$(echo $src | cut -d'|' -f1)
      key=$(echo $src | cut -d'|' -f2)
      if [[ -n "$key" ]] ; then
        juju-log "$CHARM: Importing repository key: $key"
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "$key" || \
          juju-log "$CHARM WARN: Could not import key from keyserver: $key"
      else
        juju-log "$CHARM No repository key specified"
        url="$src"
      fi
      add-apt-repository -y "$url"
    fi
    return
  fi
  juju-log "nova: No PPA specified. Falling back to installation from Ubuntu archive."
}
